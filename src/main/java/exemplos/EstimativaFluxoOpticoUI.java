/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exemplos;

import captura.ICapturaVideoUI;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JPanel;
import org.bytedeco.opencv.opencv_core.Point2f;
import org.opencv.core.*;
import util.JPanelImageUtil;

/**
 *
 * @author robertosilva
 */
public class EstimativaFluxoOpticoUI extends javax.swing.JPanel implements ICapturaVideoUI, Observer {

    private JPanel pnlExibicao;
    private EstimativaFluxoOptico obj;
    private boolean camDisponivel;
    private boolean renderizaMiniaturaProcessada;

    /**
     * Creates new form EstimativaFluxoOpticoUI
     */
    public EstimativaFluxoOpticoUI() {
        initComponents();

        obj = new EstimativaFluxoOptico();
        obj.addObserver(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setText("Estimativa de Fluxo Óptico");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(202, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Métodos herdados">
    @Override
    public boolean cameraDisponivel() {
        return camDisponivel;
    }

    @Override
    public void iniciar() {
        obj.iniciarCaptura();
    }

    @Override
    public void parar() {
        obj.pararCaptura();
    }

    @Override
    public void setPainelExibicao(JPanel painel) {
        pnlExibicao = painel;
        
        MouseAdapter mouse = new MouseAdapter() {
            
//            @Override
//            public void mouseMoved(MouseEvent e) {
//                //obj.setPoint(e.getPoint());
//                System.out.printf("    %d, %d\n", e.getPoint().x, e.getPoint().y);
//            }
            
            @Override
            public void mouseDragged(MouseEvent e) {
                obj.setPontoFim(e.getPoint());
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                obj.setPontoFim(e.getPoint());
                obj.finalizaAreaSelecao();
            }

            @Override
            public void mousePressed(MouseEvent e) {
                obj.setPontoIni(e.getPoint());
                obj.setPontoFim(e.getPoint());
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                switch (e.getButton()) {
                    case MouseEvent.BUTTON1:
                        //Botão esquerdo
                        break;
                    case MouseEvent.BUTTON2:
                        //Botão do meio
                        break;
                    case MouseEvent.BUTTON3:
                        //Botão direito
                        break;
                    default:
                        break;
                }
            }
        };

        pnlExibicao.addMouseListener(mouse);
        pnlExibicao.addMouseMotionListener(mouse);
    }

    @Override
    public void setRenderizaMiniaturaProcessada(boolean renderizaMiniaturaProcessada) {
        this.renderizaMiniaturaProcessada = renderizaMiniaturaProcessada;
    }

    @Override
    public void setExibicaoInvertida(boolean exibicaoInvertida) {
        obj.setExibicaoInvertida(exibicaoInvertida);
    }

    @Override
    public boolean getExibicaoInvertida() {
        return obj.getExibicaoInvertida();
    }

    @Override
    public void update(Observable o, Object arg) {
        BufferedImage[] bufImgs = (BufferedImage[]) arg;

        if (bufImgs.length == 0) {
            camDisponivel = true;
            return;
        }

        JPanelImageUtil.drawImageWithAspectRatio(pnlExibicao, bufImgs[1]);

        camDisponivel = true;
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
