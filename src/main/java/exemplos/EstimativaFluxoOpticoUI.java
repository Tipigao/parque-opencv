/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exemplos;

import captura.ICapturaVideoUI;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javafx.util.Pair;
import javax.swing.JPanel;
import org.bytedeco.opencv.opencv_core.Point2f;
import org.opencv.core.*;
import util.JPanelImageUtil;

/**
 *
 * @author robertosilva
 */
public class EstimativaFluxoOpticoUI extends javax.swing.JPanel implements ICapturaVideoUI, Observer {

    private JPanel pnlExibicao;
    private EstimativaFluxoOptico obj;
    private boolean camDisponivel;
    private boolean renderizaMiniaturaProcessada;

    /**
     * Creates new form EstimativaFluxoOpticoUI
     */
    public EstimativaFluxoOpticoUI() {
        initComponents();

        obj = new EstimativaFluxoOptico();
        obj.addObserver(this);

        obj.setExibeMelhoresPontos(radMelhoresPontos.isSelected());
        obj.setExibeRastreamento(radRastreamento.isSelected());
        cbxLinhas.setEnabled(radRastreamento.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        sldNumMaxCantos = new javax.swing.JSlider();
        spnNumMaxCantos = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        sldNivelQualidade = new javax.swing.JSlider();
        txtNivelQualidade = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbxInformacoes = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        radMelhoresPontos = new javax.swing.JRadioButton();
        radRastreamento = new javax.swing.JRadioButton();
        cbxLinhas = new javax.swing.JCheckBox();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ajuste de detecção de cantos com maior destaque"));
        jPanel2.setLayout(new java.awt.GridLayout(0, 3, 5, 5));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Núm. máx. cantos");
        jLabel5.setToolTipText("Número máximo de cantos para retornar. Se há mais cantos do que são encontrados, o mais forte deles é retornado. Se o valor for < = 0 implica que nenhum limite no máximo é definido e todos os cantos detectados são retornados.");
        jPanel2.add(jLabel5);

        sldNumMaxCantos.setMaximum(1000);
        sldNumMaxCantos.setToolTipText("Número máximo de cantos para retornar. Se há mais cantos do que são encontrados, o mais forte deles é retornado. Se o valor for < = 0 implica que nenhum limite no máximo é definido e todos os cantos detectados são retornados.");
        sldNumMaxCantos.setValue(10);
        sldNumMaxCantos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldNumMaxCantosStateChanged(evt);
            }
        });
        jPanel2.add(sldNumMaxCantos);

        spnNumMaxCantos.setModel(new javax.swing.SpinnerNumberModel(10, 0, 1000, 1));
        spnNumMaxCantos.setToolTipText("Número máximo de cantos para retornar. Se há mais cantos do que são encontrados, o mais forte deles é retornado. Se o valor for < = 0 implica que nenhum limite no máximo é definido e todos os cantos detectados são retornados.");
        spnNumMaxCantos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnNumMaxCantosStateChanged(evt);
            }
        });
        jPanel2.add(spnNumMaxCantos);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Nível de qualidade");
        jLabel6.setToolTipText("Número máximo de cantos para retornar. Se há mais cantos do que são encontrados, o mais forte deles é retornado. Se o valor for < = 0 implica que nenhum limite no máximo é definido e todos os cantos detectados são retornados.");
        jPanel2.add(jLabel6);

        sldNivelQualidade.setMaximum(99);
        sldNivelQualidade.setMinimum(1);
        sldNivelQualidade.setToolTipText("Número máximo de cantos para retornar. Se há mais cantos do que são encontrados, o mais forte deles é retornado. Se o valor for < = 0 implica que nenhum limite no máximo é definido e todos os cantos detectados são retornados.");
        sldNivelQualidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldNivelQualidadeStateChanged(evt);
            }
        });
        jPanel2.add(sldNivelQualidade);

        txtNivelQualidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNivelQualidade.setText("0,01");
        txtNivelQualidade.setEnabled(false);
        jPanel2.add(txtNivelQualidade);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Informações");
        jPanel2.add(jLabel7);

        cbxInformacoes.setSelected(true);
        cbxInformacoes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbxInformacoesStateChanged(evt);
            }
        });
        cbxInformacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxInformacoesActionPerformed(evt);
            }
        });
        jPanel2.add(cbxInformacoes);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        buttonGroup1.add(radMelhoresPontos);
        radMelhoresPontos.setSelected(true);
        radMelhoresPontos.setText("Melhores pontos");
        radMelhoresPontos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radMelhoresPontosActionPerformed(evt);
            }
        });
        jPanel3.add(radMelhoresPontos);

        buttonGroup1.add(radRastreamento);
        radRastreamento.setText("Fluxo Óptico");
        radRastreamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRastreamentoActionPerformed(evt);
            }
        });
        jPanel3.add(radRastreamento);

        cbxLinhas.setText("Linhas");
        cbxLinhas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLinhasActionPerformed(evt);
            }
        });
        jPanel3.add(cbxLinhas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(241, Short.MAX_VALUE)))
        );

        jPanel2.getAccessibleContext().setAccessibleName("pnlAjustes");
    }// </editor-fold>//GEN-END:initComponents

    private void sldNumMaxCantosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldNumMaxCantosStateChanged
        int vl = (int) sldNumMaxCantos.getValue();
        obj.setNumMaxCantos(vl);
        spnNumMaxCantos.setValue(vl);
    }//GEN-LAST:event_sldNumMaxCantosStateChanged

    private void spnNumMaxCantosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnNumMaxCantosStateChanged
        int vl = (int) spnNumMaxCantos.getValue();
        obj.setNumMaxCantos(vl);
        sldNumMaxCantos.setValue(vl);
    }//GEN-LAST:event_spnNumMaxCantosStateChanged

    private void cbxInformacoesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbxInformacoesStateChanged
        //obj.setCannyGradient(cbxGradiente.isSelected());
    }//GEN-LAST:event_cbxInformacoesStateChanged

    private void radMelhoresPontosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radMelhoresPontosActionPerformed
        obj.setExibeMelhoresPontos(radMelhoresPontos.isSelected());
        obj.setExibeRastreamento(!radMelhoresPontos.isSelected());
        cbxLinhas.setEnabled(radRastreamento.isSelected());
    }//GEN-LAST:event_radMelhoresPontosActionPerformed

    private void radRastreamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radRastreamentoActionPerformed
        obj.setExibeRastreamento(radRastreamento.isSelected());
        obj.setExibeMelhoresPontos(!radRastreamento.isSelected());
        cbxLinhas.setEnabled(radRastreamento.isSelected());
    }//GEN-LAST:event_radRastreamentoActionPerformed

    private void cbxLinhasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLinhasActionPerformed
        obj.setExibeLinhasRastreamento(cbxLinhas.isSelected());
    }//GEN-LAST:event_cbxLinhasActionPerformed

    private void cbxInformacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxInformacoesActionPerformed
        obj.setExibeInformacoes(cbxInformacoes.isSelected());
    }//GEN-LAST:event_cbxInformacoesActionPerformed

    private void sldNivelQualidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldNivelQualidadeStateChanged
        double vl = (double)sldNivelQualidade.getValue()/100.0;
        obj.setNivelQualidade(vl);
        txtNivelQualidade.setText(""+vl);
        //spnNivelQualidade.setValue(vl);
    }//GEN-LAST:event_sldNivelQualidadeStateChanged

    // <editor-fold defaultstate="collapsed" desc="Métodos herdados">
    @Override
    public boolean cameraDisponivel() {
        return camDisponivel;
    }

    @Override
    public void iniciar() {
        obj.iniciarCaptura();
    }

    @Override
    public void parar() {
        obj.pararCaptura();
    }

    @Override
    public void setPainelExibicao(JPanel painel) {
        pnlExibicao = painel;

        MouseAdapter mouse = new MouseAdapter() {

//            @Override
//            public void mouseMoved(MouseEvent e) {
//                //obj.setPoint(e.getPoint());
//                System.out.printf("    %d, %d\n", e.getPoint().x, e.getPoint().y);
//            }
            @Override
            public void mouseDragged(MouseEvent e) {
                obj.setPontoFim(e.getPoint());
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                obj.setPontoFim(e.getPoint());
                obj.finalizaAreaSelecao();
            }

            @Override
            public void mousePressed(MouseEvent e) {
                obj.setPontoIni(e.getPoint());
                obj.setPontoFim(e.getPoint());
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                switch (e.getButton()) {
                    case MouseEvent.BUTTON1:
                        //Botão esquerdo
                        break;
                    case MouseEvent.BUTTON2:
                        //Botão do meio
                        break;
                    case MouseEvent.BUTTON3:
                        //Botão direito
                        break;
                    default:
                        break;
                }
            }
        };

        pnlExibicao.addMouseListener(mouse);
        pnlExibicao.addMouseMotionListener(mouse);
    }

    @Override
    public void setRenderizaMiniaturaProcessada(boolean renderizaMiniaturaProcessada) {
        this.renderizaMiniaturaProcessada = renderizaMiniaturaProcessada;
    }

    @Override
    public void setExibicaoInvertida(boolean exibicaoInvertida) {
        obj.setExibicaoInvertida(exibicaoInvertida);
    }

    @Override
    public boolean getExibicaoInvertida() {
        return obj.getExibicaoInvertida();
    }

    @Override
    public void update(Observable o, Object arg) {
        BufferedImage[] bufImgs = (BufferedImage[]) arg;

        if (bufImgs.length == 0) {
            camDisponivel = true;
            return;
        }

        Pair<java.awt.Point, java.awt.Dimension> ddoImg = JPanelImageUtil.drawImageWithAspectRatio(pnlExibicao, bufImgs[1]);

        obj.setPosicaoImagem(ddoImg.getKey());
        obj.setTamanhoImagem(ddoImg.getValue());

        //System.out.printf("%d, %d, %d, %d\n", ddoImg[0], ddoImg[1], ddoImg[2], ddoImg[3]);
        camDisponivel = true;
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbxInformacoes;
    private javax.swing.JCheckBox cbxLinhas;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton radMelhoresPontos;
    private javax.swing.JRadioButton radRastreamento;
    private javax.swing.JSlider sldNivelQualidade;
    private javax.swing.JSlider sldNumMaxCantos;
    private javax.swing.JSpinner spnNumMaxCantos;
    private javax.swing.JTextField txtNivelQualidade;
    // End of variables declaration//GEN-END:variables
}
