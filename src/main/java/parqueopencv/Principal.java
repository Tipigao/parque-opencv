/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parqueopencv;

import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.logging.*;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Roberto
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        ajustaTamanhoJanela();
        
        pnlControleItem.getVerticalScrollBar().setUnitIncrement(16);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        pnlControles = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboDemonstracao = new javax.swing.JComboBox<>();
        btnVisualizar = new javax.swing.JButton();
        btnPararExibicao = new javax.swing.JButton();
        cbxMiniaturaProcessada = new javax.swing.JCheckBox();
        pnlControleItem = new javax.swing.JScrollPane();
        cbxNormalInvertida = new javax.swing.JCheckBox();
        pnlSaidaImagem = new javax.swing.JPanel();
        mnuPrincipal = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuArquivo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Parque OpenCV");
        setMinimumSize(new java.awt.Dimension(480, 320));
        setPreferredSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setDoubleBuffered(true);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(250, 480));
        jSplitPane1.setName(""); // NOI18N
        jSplitPane1.setPreferredSize(this.getSize());

        jSplitPane1.resetToPreferredSizes();

        pnlControles.setPreferredSize(new java.awt.Dimension(300, 480));

        jLabel1.setText("Ferramenta");

        cboDemonstracao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboDemonstracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDemonstracaoActionPerformed(evt);
            }
        });

        btnVisualizar.setText("Exibir");
        btnVisualizar.setEnabled(false);
        btnVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarActionPerformed(evt);
            }
        });

        btnPararExibicao.setText("Parar");
        btnPararExibicao.setEnabled(false);
        btnPararExibicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPararExibicaoActionPerformed(evt);
            }
        });

        cbxMiniaturaProcessada.setSelected(true);
        cbxMiniaturaProcessada.setText("Miniatura processada");
        cbxMiniaturaProcessada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMiniaturaProcessadaActionPerformed(evt);
            }
        });

        cbxNormalInvertida.setSelected(true);
        cbxNormalInvertida.setText("Invertida");
        cbxNormalInvertida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNormalInvertidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlesLayout = new javax.swing.GroupLayout(pnlControles);
        pnlControles.setLayout(pnlControlesLayout);
        pnlControlesLayout.setHorizontalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlControleItem)
                    .addGroup(pnlControlesLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboDemonstracao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlesLayout.createSequentialGroup()
                        .addComponent(cbxMiniaturaProcessada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxNormalInvertida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(btnPararExibicao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizar)))
                .addContainerGap())
        );
        pnlControlesLayout.setVerticalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboDemonstracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVisualizar)
                    .addComponent(btnPararExibicao)
                    .addComponent(cbxMiniaturaProcessada)
                    .addComponent(cbxNormalInvertida))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControleItem, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(pnlControles);

        pnlSaidaImagem.setBackground(new java.awt.Color(0, 0, 0));
        pnlSaidaImagem.setPreferredSize(new java.awt.Dimension(640, 480));

        javax.swing.GroupLayout pnlSaidaImagemLayout = new javax.swing.GroupLayout(pnlSaidaImagem);
        pnlSaidaImagem.setLayout(pnlSaidaImagemLayout);
        pnlSaidaImagemLayout.setHorizontalGroup(
            pnlSaidaImagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );
        pnlSaidaImagemLayout.setVerticalGroup(
            pnlSaidaImagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(pnlSaidaImagem);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);

        jMenu1.setText("Arquivo");

        mnuArquivo.setText("Sair");
        jMenu1.add(mnuArquivo);

        mnuPrincipal.add(jMenu1);

        setJMenuBar(mnuPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (objDemo != null) {
            objDemo.parar();
        }
        
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void btnVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarActionPerformed
        if (cboDemonstracao.getSelectedIndex() == 1) {
            exibeVideoCamera();
        }
    }//GEN-LAST:event_btnVisualizarActionPerformed

    private void cboDemonstracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDemonstracaoActionPerformed
        javax.swing.JComboBox cbo = (javax.swing.JComboBox) evt.getSource();
        exibeVideoCamera();
    }//GEN-LAST:event_cboDemonstracaoActionPerformed

    private void btnPararExibicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPararExibicaoActionPerformed
        exibeVideoCamera();
    }//GEN-LAST:event_btnPararExibicaoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DefaultComboBoxModel opt = new DefaultComboBoxModel(enumeradores.TipoTransformacao.values());
        opt.insertElementAt("Selecione...", 0);
        cboDemonstracao.setModel(opt);
        cboDemonstracao.setSelectedIndex(0);
    }//GEN-LAST:event_formWindowOpened

    private void cbxMiniaturaProcessadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMiniaturaProcessadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxMiniaturaProcessadaActionPerformed

    private void cbxNormalInvertidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNormalInvertidaActionPerformed
        if (objDemo != null) {
            objDemo.setExibicaoInvertida(cbxNormalInvertida.isSelected());
        }
        
        //cbxNormalInvertida.setText(cbxNormalInvertida.isSelected() ? "Normal" : "Invertida");
        
    }//GEN-LAST:event_cbxNormalInvertidaActionPerformed

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void ajustaTamanhoJanela() {
        
        Dimension tamanhoTela = Toolkit.getDefaultToolkit().getScreenSize();
        Rectangle areaTela = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
        
        int largura = (int) Math.min(areaTela.getWidth(), tamanhoTela.getWidth());
        int altura = (int) Math.min(areaTela.getHeight(), tamanhoTela.getHeight());

        //System.out.printf("A resolução da tela é: %sx%s\n", largura, altura);
        if (largura > 1024) {
            //Se a resolução do monitor for inferior à 50% de 1024 de largura, então é um monitor com média resolução
            boolean larguraMedia = largura < (1024 * 1.5);
            
            largura = larguraMedia ? largura : 1024;
            altura = larguraMedia && altura < (768 * 1.5) ? altura : 768;
            
            //System.out.printf("Nova resolução: %sx%s\n", largura, altura);
        }
        
        setSize(largura, altura);

        //Posição centralizada
        setLocationRelativeTo(null);
    }
    
    public void exibeVideoCamera() {
        try {
            String nmClasse = null;
            
            if (objDemo != null) {
                objDemo.parar();
                pnlSaidaImagem.setBackground(new java.awt.Color(0, 0, 0));
                pnlSaidaImagem.revalidate();
                pnlSaidaImagem.repaint();

//                pnlControleItem.removeAll();;;
//                pnlControleItem.revalidate();
//                pnlControleItem.repaint();
            }
            
            if (cboDemonstracao.getSelectedIndex() > 0) {
                enumeradores.TipoTransformacao tpt = (enumeradores.TipoTransformacao) cboDemonstracao.getSelectedItem();
                nmClasse = tpt.getClasse();
            } else {
                //nmClasse = captura.VideoSimples.class.getName();// "captura.VideoSimples";
                nmClasse = captura.VideoSimples.class.getCanonicalName();
            }
            
            objDemo = (captura.ICapturaVideoUI) Class.forName(nmClasse + "UI").newInstance();
            javax.swing.JPanel pnlDemo = (javax.swing.JPanel) objDemo;
            //System.out.println(pnlDemo.getPreferredSize());
            pnlControleItem.getViewport().add(pnlDemo);

            //pnlControleItem.setSize(new Dimension(600, 350));
            objDemo.setExibicaoInvertida(cbxNormalInvertida.isSelected());
            objDemo.setPainelExibicao(pnlSaidaImagem);
            objDemo.iniciar();
            pnlDemo.setVisible(true);
            
            new Thread() {
                @Override
                public void run() {
                    
                    cboDemonstracao.setEnabled(false);
                    
                    if (temporizadorVerificaCamera != null) {
                        temporizadorVerificaCamera.cancel();
                        temporizadorVerificaCamera.purge();
                    }
                    
                    temporizadorVerificaCamera = new java.util.Timer();
                    temporizadorVerificaCamera.scheduleAtFixedRate(new java.util.TimerTask() {
                        int cont = 0;
                        
                        @Override
                        public void run() {
                            if (!objDemo.cameraDisponivel()) {
                                //System.out.println("Esperando a câmera ficar disponível " +(++cont));
                                return;
                            }
                            temporizadorVerificaCamera.cancel();
                            temporizadorVerificaCamera.purge();
                            temporizadorVerificaCamera = null;
                            cboDemonstracao.setEnabled(true);
                            cboDemonstracao.requestFocus();
                        }
                    }, 0, 50);
                }
            }.start();
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //System.loadLibrary(org.opencv.core.Core.NATIVE_LIBRARY_NAME);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
                //new CornerSubPix(args);
            }
        });
    }
    
    private captura.ICapturaVideoUI objDemo;
    private java.util.Timer temporizadorVerificaCamera;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPararExibicao;
    private javax.swing.JButton btnVisualizar;
    private javax.swing.JComboBox<String> cboDemonstracao;
    private javax.swing.JCheckBox cbxMiniaturaProcessada;
    private javax.swing.JCheckBox cbxNormalInvertida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem mnuArquivo;
    private javax.swing.JMenuBar mnuPrincipal;
    private javax.swing.JScrollPane pnlControleItem;
    private javax.swing.JPanel pnlControles;
    private javax.swing.JPanel pnlSaidaImagem;
    // End of variables declaration//GEN-END:variables
}
